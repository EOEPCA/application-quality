server {
    listen       80;
    listen  [::]:80;
    server_name  localhost;

    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # Proxy the Application Quality Backend API
    location ~* ^/api/(.*) {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $http_host;
        #proxy_set_header X-Forwarded-Proto 'https';

        # Use Kubernetes FQDN
        resolver kube-dns.kube-system.svc.cluster.local;
        set $component ${BACKEND_SERVICE_HOST}:${BACKEND_SERVICE_PORT};
        proxy_pass http://$component/api/$1$is_args$args;
    }

    # Proxy the Application Quality Backend static files
    location ~* ^/static/(.*) {
        # Use Kubernetes FQDN
        resolver kube-dns.kube-system.svc.cluster.local;
        set $component ${BACKEND_SERVICE_HOST}:${BACKEND_SERVICE_PORT};
        proxy_pass http://$component/static/$1$is_args$args;
    }

    # Proxy the Application Quality Backend Administration pages
    location ~* ^/admin/(.*) {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $http_host;
        #proxy_set_header X-Forwarded-Proto 'https';

        # Use Kubernetes FQDN
        resolver kube-dns.kube-system.svc.cluster.local;
        set $component ${BACKEND_SERVICE_HOST}:${BACKEND_SERVICE_PORT};
        proxy_pass http://$component/admin/$1$is_args$args;
    }

    # Proxy the Application Quality Backend Administration pages
    location ~* ^/oidc/(.*) {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $http_host;
        #proxy_set_header X-Forwarded-Proto 'https';

        # Use Kubernetes FQDN
        resolver kube-dns.kube-system.svc.cluster.local;
        set $component ${BACKEND_SERVICE_HOST}:${BACKEND_SERVICE_PORT};
        proxy_pass http://$component/oidc/$1$is_args$args;
    }
}