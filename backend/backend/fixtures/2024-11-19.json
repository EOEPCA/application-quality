[{"model": "backend.pipeline", "pk": "python", "fields": {"description": "python pipeline", "template": "#!/usr/bin/env cwltool\r\n\r\n$graph:\r\n- class: Workflow\r\n\r\n  requirements:\r\n    SubworkflowFeatureRequirement: {}\r\n\r\n  inputs:\r\n    pipeline_id:\r\n      type: string\r\n    repo_branch:\r\n      type: string\r\n    repo_url:\r\n      type: string\r\n    run_id:\r\n      type: string\r\n    server_url:\r\n      type: string\r\n\r\n  outputs: []\r\n\r\n  steps:\r\n    clone_step:\r\n      in:\r\n        repo_url: repo_url\r\n        repo_branch: repo_branch\r\n      run: '#clone_tool'\r\n      out:\r\n      - repo_directory\r\n    {% for tool in subworkflows %}{{ tool.workflow_step | indent(4) }}\r\n    {% endfor %}\r\n  id: main\r\n\r\n- class: CommandLineTool\r\n\r\n  requirements:\r\n    DockerRequirement:\r\n      dockerPull: alpine/git\r\n    InlineJavascriptRequirement: {}\r\n\r\n  inputs:\r\n    repo_branch:\r\n      type: string\r\n      default: main\r\n    repo_url:\r\n      type: string\r\n\r\n  outputs:\r\n    repo_directory:\r\n      type: Directory\r\n      outputBinding:\r\n        glob: $(inputs.repo_url.split('/').pop().replace('.git',''))\r\n\r\n  baseCommand: git\r\n  arguments:\r\n  - clone\r\n  - $(inputs.repo_url)\r\n  - -b\r\n  - $(inputs.repo_branch)\r\n  id: clone_tool\r\n{% for tool in subworkflows %}\r\n{{ tool.definition }}\r\n{% endfor %}\r\ncwlVersion: v1.0", "version": "0.1", "tools": ["flake8_workflow", "pylint_workflow", "ruff_workflow"]}}, {"model": "backend.tag", "pk": 1, "fields": {"name": "python"}}, {"model": "backend.tag", "pk": 2, "fields": {"name": "other"}}, {"model": "backend.tool", "pk": "flake8_tool", "fields": {"name": "flake8", "description": "flake8", "workflow_step": "", "definition": "- class: CommandLineTool\r\n\r\n  requirements:\r\n    DockerRequirement:\r\n      dockerPull: eoepca/appquality-flake8-json:v0.1.0\r\n\r\n  inputs:\r\n    source_directory:\r\n      type: Directory\r\n      inputBinding:\r\n        position: 1\r\n\r\n  outputs:\r\n    flake8_report:\r\n      type: File\r\n      outputBinding:\r\n        glob: flake8_report.json\r\n\r\n  baseCommand: flake8\r\n  arguments:\r\n  - --format=json\r\n  - --output-file=flake8_report.json\r\n  id: flake8_tool", "is_cwl": false, "version": "0.1", "tags": [1], "tools": []}}, {"model": "backend.tool", "pk": "flake8_workflow", "fields": {"name": "flake8_workflow", "description": "flake8 - Style guide enforcement tool for Python", "workflow_step": "flake8_workflow_step:\r\n  in:\r\n    pipeline_id: pipeline_id\r\n    repo_path: clone_step/repo_directory\r\n    run_id: run_id\r\n    server_url: server_url\r\n  run: '#flake8_workflow'\r\n  out: []", "definition": "- class: Workflow\r\n\r\n  inputs:\r\n    pipeline_id:\r\n      type: string\r\n    repo_path:\r\n      type: Directory\r\n    run_id:\r\n      type: string\r\n    server_url:\r\n      type: string\r\n    name:\r\n      type: string\r\n      default: flake8\r\n\r\n  outputs:\r\n    flake8_report:\r\n      type: File\r\n      outputSource: flake8_step/flake8_report\r\n\r\n  steps:\r\n    flake8_step:\r\n      in:\r\n        source_directory: repo_path\r\n      run: '#flake8_tool'\r\n      out:\r\n      - flake8_report\r\n    save_flake8_step:\r\n      in:\r\n        pipeline_id: pipeline_id\r\n        report: flake8_step/flake8_report\r\n        run_id: run_id\r\n        server_url: server_url\r\n        name: name\r\n      run: '#save_tool'\r\n      out: []\r\n  id: flake8_workflow\r\n{% for tool in tools %}{{ tool.definition }}\r\n{% endfor %}", "is_cwl": true, "version": "0.1", "tags": [1], "tools": ["flake8_tool", "save_tool"]}}, {"model": "backend.tool", "pk": "pylint_tool", "fields": {"name": "pylint", "description": "pylint", "workflow_step": "", "definition": "- class: CommandLineTool\r\n\r\n  requirements:\r\n    DockerRequirement:\r\n      dockerPull: cytopia/pylint\r\n    InlineJavascriptRequirement: {}\r\n\r\n  inputs:\r\n    source_directory:\r\n      type: Directory\r\n      inputBinding:\r\n        position: 1\r\n        valueFrom: $(inputs.source_directory.path + \"/**/*.py\")\r\n\r\n  outputs:\r\n    pylint_report:\r\n      type: File\r\n      outputBinding:\r\n        glob: pylint_report.json\r\n\r\n  baseCommand: pylint\r\n  arguments:\r\n  - --output-format=json\r\n  - --output=pylint_report.json\r\n  - --exit-zero\r\n  id: pylint_tool", "is_cwl": false, "version": "0.1", "tags": [1], "tools": []}}, {"model": "backend.tool", "pk": "pylint_workflow", "fields": {"name": "pylint_workflow", "description": "pylint - Static code analyser tool for Python", "workflow_step": "pylint_workflow_step:\r\n  in:\r\n    pipeline_id: pipeline_id\r\n    repo_path: clone_step/repo_directory\r\n    run_id: run_id\r\n    server_url: server_url\r\n  run: '#pylint_workflow'\r\n  out: []", "definition": "- class: Workflow\r\n\r\n  inputs:\r\n    pipeline_id:\r\n      type: string\r\n    repo_path:\r\n      type: Directory\r\n    run_id:\r\n      type: string\r\n    server_url:\r\n      type: string\r\n    name:\r\n      type: string\r\n      default: pylint\r\n\r\n  outputs:\r\n    pylint_report:\r\n      type: File\r\n      outputSource: pylint_step/pylint_report\r\n\r\n  steps:\r\n    pylint_step:\r\n      in:\r\n        source_directory: repo_path\r\n      run: '#pylint_tool'\r\n      out:\r\n      - pylint_report\r\n    save_pylint_step:\r\n      in:\r\n        pipeline_id: pipeline_id\r\n        report: pylint_step/pylint_report\r\n        run_id: run_id\r\n        server_url: server_url\r\n        name: name\r\n      run: '#save_tool'\r\n      out: []\r\n  id: pylint_workflow\r\n{% for tool in tools %}{{ tool.definition }}\r\n{% endfor %}", "is_cwl": true, "version": "0.1", "tags": [1], "tools": ["pylint_tool", "save_tool"]}}, {"model": "backend.tool", "pk": "ruff_tool", "fields": {"name": "ruff", "description": "ruff check", "workflow_step": "", "definition": "- class: CommandLineTool\r\n\r\n  requirements:\r\n    DockerRequirement:\r\n      dockerPull: ghcr.io/astral-sh/ruff:alpine\r\n    InlineJavascriptRequirement: {}\r\n\r\n  inputs:\r\n    source_directory:\r\n      type: Directory\r\n      inputBinding:\r\n        position: 1\r\n\r\n  outputs:\r\n    ruff_report:\r\n      type: File\r\n      outputBinding:\r\n        glob: ruff_report.json\r\n\r\n  baseCommand:\r\n  - ruff\r\n  - check\r\n  arguments:\r\n  - --exclude\r\n  - .git\r\n  - --output-format\r\n  - json\r\n  - -o\r\n  - ruff_report.json\r\n  - -en\r\n  id: ruff_tool", "is_cwl": false, "version": "0.1", "tags": [1], "tools": []}}, {"model": "backend.tool", "pk": "ruff_workflow", "fields": {"name": "ruff_workflow", "description": "Ruff - An extremely fast Python linter and code formatter, written in Rust.", "workflow_step": "ruff_workflow_step:\r\n  in:\r\n    pipeline_id: pipeline_id\r\n    repo_path: clone_step/repo_directory\r\n    run_id: run_id\r\n    server_url: server_url\r\n  run: '#ruff_workflow'\r\n  out: []", "definition": "- class: Workflow\r\n\r\n  inputs:\r\n    pipeline_id:\r\n      type: string\r\n    repo_path:\r\n      type: Directory\r\n    run_id:\r\n      type: string\r\n    server_url:\r\n      type: string\r\n    name:\r\n      type: string\r\n      default: ruff\r\n\r\n  outputs:\r\n    ruff_report:\r\n      type: File\r\n      outputSource: ruff_step/ruff_report\r\n\r\n  steps:\r\n    ruff_step:\r\n      in:\r\n        source_directory: repo_path\r\n      run: '#ruff_tool'\r\n      out:\r\n      - ruff_report\r\n    save_ruff_step:\r\n      in:\r\n        pipeline_id: pipeline_id\r\n        report: ruff_step/ruff_report\r\n        run_id: run_id\r\n        server_url: server_url\r\n        name: name\r\n      run: '#save_tool'\r\n      out: []\r\n  id: ruff_workflow\r\n{% for tool in tools %}{{ tool.definition }}\r\n{% endfor %}", "is_cwl": true, "version": "0.1", "tags": [1], "tools": ["ruff_tool", "save_tool"]}}, {"model": "backend.tool", "pk": "save_tool", "fields": {"name": "save", "description": "curl", "workflow_step": "", "definition": "- class: CommandLineTool\r\n\r\n  requirements:\r\n    DockerRequirement:\r\n      dockerPull: curlimages/curl\r\n    InlineJavascriptRequirement: {}\r\n\r\n  inputs:\r\n    pipeline_id:\r\n      type: string\r\n    report:\r\n      type: File\r\n    run_id:\r\n      type: string\r\n    server_url:\r\n      type: string\r\n    name:\r\n      type: string\r\n\r\n  outputs: []\r\n\r\n  baseCommand: curl\r\n  arguments:\r\n  - prefix: -X\r\n    valueFrom: POST\r\n  - prefix: -L\r\n    valueFrom: |-\r\n      $('http://' + inputs.server_url + '/api/pipelines/' + inputs.pipeline_id + '/runs/' + inputs.run_id + '/jobreports/?name=' + inputs.name)\r\n  - prefix: -H\r\n    valueFrom: Content-Type:application/json\r\n  - prefix: -d\r\n    valueFrom: $('@' + inputs.report.path)\r\n  id: save_tool", "is_cwl": false, "version": "0.1", "tags": [2], "tools": []}}]